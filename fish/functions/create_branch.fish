function create_branch
    # Fun√ß√£o para criar branches Git com padr√£o personalizado
    # Uso: create_branch
    
    # Verificar se estamos em um reposit√≥rio Git
    if not git rev-parse --git-dir >/dev/null 2>&1
        echo "‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git!"
        return 1
    end
    
    # 1. Perguntar o tipo de branch
    echo "üîÄ Tipos de branch dispon√≠veis:"
    echo "  1) feat    - Nova funcionalidade"
    echo "  2) fix     - Corre√ß√£o de bug"
    echo "  3) chore   - Tarefas de manuten√ß√£o"
    echo "  4) docs    - Documenta√ß√£o"
    echo "  5) style   - Formata√ß√£o/estilo"
    echo "  6) refactor - Refatora√ß√£o"
    echo "  7) test    - Testes"
    
    read -P "üìù Digite o n√∫mero ou nome do tipo de branch: " branch_type
    
    # Mapear n√∫meros para tipos
    switch $branch_type
        case 1
            set branch_type "feat"
        case 2
            set branch_type "fix"
        case 3
            set branch_type "chore"
        case 4
            set branch_type "docs"
        case 5
            set branch_type "style"
        case 6
            set branch_type "refactor"
        case 7
            set branch_type "test"
        case "*"
            # Manter o valor digitado se n√£o for n√∫mero
    end
    
    # Validar tipo de branch
    if test -z "$branch_type"
        echo "‚ùå Tipo de branch n√£o pode estar vazio!"
        return 1
    end
    
    # 2. Perguntar o nome da branch
    read -P "üìù Digite o nome da branch (ex: migra√ß√£o de tela xpto): " branch_name
    
    if test -z "$branch_name"
        echo "‚ùå Nome da branch n√£o pode estar vazio!"
        return 1
    end
    
    # 3. Limpar e formatar strings
    # Converter para min√∫sculas e remover acentos/caracteres especiais
    set clean_type (echo $branch_type | string lower | string replace -ra '[^a-z0-9]' '')
    
    # Limpar nome da branch: min√∫sculas, remover acentos, caracteres especiais, e converter espa√ßos para h√≠fens
    set clean_name (echo $branch_name | string lower | \
                    string replace -ra '[√°√†√¢√£√§]' 'a' | \
                    string replace -ra '[√©√®√™√´]' 'e' | \
                    string replace -ra '[√≠√¨√Æ√Ø]' 'i' | \
                    string replace -ra '[√≥√≤√¥√µ√∂]' 'o' | \
                    string replace -ra '[√∫√π√ª√º]' 'u' | \
                    string replace -ra '[√ß]' 'c' | \
                    string replace -ra '[√±]' 'n' | \
                    string replace -ra '[^a-z0-9\s]' '' | \
                    string replace -ra '\s+' '-' | \
                    string replace -ra '^-+|-+$' '')
    
    # 4. Criar nome da branch no padr√£o especificado
    set username "ribeiroevandro"  # Voc√™ pode alterar este valor
    set full_branch_name "$username/$clean_type-$clean_name"
    
    # Mostrar preview da branch
    echo ""
    echo "üéØ Branch que ser√° criada:"
    echo "   $full_branch_name"
    echo ""
    
    # Confirmar cria√ß√£o
    read -P "‚úÖ Criar esta branch? [Y/n]: " confirm
    
    if test "$confirm" = "n" -o "$confirm" = "N"
        echo "‚ùå Opera√ß√£o cancelada."
        return 0
    end
    
    # Verificar se a branch j√° existe
    if git show-ref --verify --quiet "refs/heads/$full_branch_name"
        echo "‚ùå A branch '$full_branch_name' j√° existe!"
        return 1
    end
    
    # Criar e fazer checkout para a nova branch
    if git switch -c $full_branch_name
        echo ""
        echo "üéâ Branch '$full_branch_name' criada e ativada com sucesso!"
        echo "üìÇ Voc√™ est√° agora na nova branch."
        
        # Mostrar status atual
        echo ""
        git status --short
    else
        echo "‚ùå Erro ao criar a branch!"
        return 1
    end
end