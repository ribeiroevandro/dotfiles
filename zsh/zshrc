# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

eval "$(/opt/homebrew/bin/brew shellenv)"

dotfiles_path="$HOME/workspace/dotfiles"
source "$HOME/.eas_credentials"
source "$dotfiles_path/scripts/eas_environment.sh"
source "$dotfiles_path/scripts/git.sh"


export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Path to your oh-my-zsh installation.
export ZSH="/Users/$(whoami)/.oh-my-zsh"
export PATH="$PATH:/usr/local/bin"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="spaceship"

plugins=(
  git
  zsh-autosuggestions
  yarn-completion
  spaceship-vi-mode
  zsh-wakatime
  tmux
  z
)

source $ZSH/oh-my-zsh.sh

# User configurations

alias rm="safe-rm"

# Emulators
alias nexus5="emulator @Nexus_5"
alias nexus5Play="emulator @Nexus_5_Play"
alias z=zoxide

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Clean Desktop
alias cleandesk="rm ~/Desktop/Screen*.png && rm ~/Desktop/Simulator*.png"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

# Edit .zshrc
alias zedit="vim ~/.dotfiles/.zshrc"

# Edit .vimrc
alias vedit="vim ~/.dotfiles/.vimrc"

alias z="zoxide"

# Expo Accounts
# alias expersonal="expo logout && expo login -u 'username' -p 'password'"

# Work directories
alias opensource="cd ~/www/opensource"
alias community="cd ~/www/community"
function work() {
    cd ~/www/work/$1
}
function mentoring() {
    cd ~/www/mentoring/$1
}

# Git Alter Origin
function gao() {
    git remote set-url origin $1
}

# Yarn add dependencies in TypeScript Projects
function yts() {
    yarn add $1 && yarn add @types/$1 -D
}

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

eval "$(rbenv init -)"

# pasteinit() {
#   OLD_SELF_INSERT=${widgets[self - insert]#*:}
#   zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
# }

# pastefinish() {
#     zle -N self-insert $OLD_SELF_INSERT
# }
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

SPACESHIP_PROMPT_ORDER=(
    user      # Username section
    dir       # Current directory section
    node      # Node.js section (node_version + node_env)
    host      # Hostname section
    git       # Git section (git_branch + git_status)
    hg        # Mercurial section (hg_branch  + hg_status)
    exec_time # Execution time
    line_sep  # Line break
    vi_mode   # Vi-mode indicator
    jobs      # Background jobs indicator
    exit_code # Exit code section
    char      # Prompt character
)
SPACESHIP_USER_SHOW=always
SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_CHAR_SYMBOL="❯"
SPACESHIP_CHAR_SUFFIX=" "

export PATH="/usr/local/sbin:$PATH"

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

# function push() {
#     git push origin $(git branch | grep \* | sed 's/\*\s//') $@
# }

# function pull() {
#     git pull origin $(git branch | grep \* | sed 's/\*\s//') $@
# }

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" &&
        print -P "%F{33} %F{34}Installation successful.%f%b" ||
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"

zinit light zdharma/fast-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-history-substring-search
zinit light zsh-users/zsh-completions
zinit light buonomo/yarn-completion

autoload -Uz compinit && compinit

zinit cdreplay -q

eval "$(zoxide init zsh)"

# bun completions
[ -s "/Users/ribeiroevandro/.bun/_bun" ] && source "/Users/ribeiroevandro/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
